AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Todo API + S3 Signed URLs: API Gateway HTTP -> Lambda (Node.js) -> DynamoDB & S3"

Parameters:
  BucketName:
    Type: String
    Default: lambda-s3-demo-valentin
    Description: "Nom du bucket S3 existant à utiliser pour les URLs signées"

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures: [arm64]
    MemorySize: 128
    Timeout: 5
    Environment:
      Variables:
        TABLE_NAME: !Ref TodoTable

Resources:
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowHeaders: ['content-type']
        AllowMethods: ['GET','POST','DELETE']

  # ------------------------------
  # DynamoDB (Todo)
  # ------------------------------
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: todo-items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableClass: STANDARD

  TodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Events:
        GetAll:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /todos
            Method: GET
        GetOne:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /todos/{id}
            Method: GET
        Create:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /todos
            Method: POST
        Delete:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /todos/{id}
            Method: DELETE

  TodoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TodoFunction}
      RetentionInDays: 7

  # ------------------------------
  # Lambda S3 Signed URLs
  # ------------------------------
  SignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3src/
      Handler: index.handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          URL_EXPIRATION_SECONDS: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub arn:aws:s3:::${BucketName}/*
      Events:
        GetUploadUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /upload-url
            Method: GET
        GetDownloadUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Path: /download-url
            Method: GET

  SignedUrlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignedUrlFunction}
      RetentionInDays: 7

Outputs:
  ApiUrl:
    Description: "Base URL de l'HTTP API"
    Value: !Sub
      - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com"
      - { ApiId: !Ref Api }
  TableName:
    Value: !Ref TodoTable
  FunctionName:
    Value: !Ref TodoFunction
  SignedUrlFunctionName:
    Value: !Ref SignedUrlFunction
  BucketUsedForSignedUrls:
    Value: !Ref BucketName
